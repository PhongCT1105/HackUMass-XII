{
    "Title": "Machine Learning for Software Engineering: Models, Methods, and Applications",
    "Authors": "Bennaceur, Amel, Meinke, Karl",
    "Year": "No year available",
    "Abstract": "Machine Learning (ML) is the discipline that studies methods for automatically inferring models from data. Machine learning has been successfully applied in many areas of software engineering ranging from behaviour extraction, to testing, to bug fixing. Many more applications are yet be defined. However, a better understanding of ML methods, their assumptions and guarantees would help software engineers  adopt and identify the appropriate methods for their desired applications. We argue that this choice can be guided by the models one seeks to infer. In this technical briefing, we review and reflect on the applications of ML for software engineering organised according to the models they produce and the methods they use. We introduce the principles of ML, give an overview of some key methods, and present examples of areas of software engineering benefiting from ML. We also discuss the open challenges for reaching the full potential of ML for software engineering and how ML can benefit from software engineering methods",
    "Keywords": "No keywords available",
    "Publisher": "'Association for Computing Machinery (ACM)'",
    "Publication Date": "No publication date available",
    "Journal": "No journal available",
    "Citation Count": 0,
    "Full Text": "Open Research OnlineThe Open University’s repository of research publicationsand other research outputsMachine Learning for Software Engineering: Models,Methods, and ApplicationsConference or Workshop ItemHow to cite:Meinke, Karl and Bennaceur, Amel (2018). Machine Learning for Software Engineering: Models, Methods,and Applications. In: Proceedings of the 40th International Conference on Software Engineering: CompanionProceeedings pp. 548–549.For guidance on citations see FAQs.c© [not recorded]Version: Accepted ManuscriptLink(s) to article on publisher’s website:http://dx.doi.org/doi:10.1145/3183440.3183461Copyright and Moral Rights for the articles on this site are retained by the individual authors and/or other copyrightowners. For more information on Open Research Online’s data policy on reuse of materials please consult the policiespage.oro.open.ac.ukMachine Learning for Software EngineeringModels, Methods, and ApplicationsKarl MeinkeKTH Royal Institute of Technology, Swedenkarlm@kth.seAmel BennaceurThe Open University, UKamel.bennaceur@open.ac.ukABSTRACTMachine Learning (ML) is the discipline that studies methods forautomatically inferring models from data. Machine learning hasbeen successfully applied in many areas of software engineeringranging from behaviour extraction, to testing, to bug fixing. Manymore applications are yet be defined. However, a better understand-ing of ML methods, their assumptions and guarantees would helpsoftware engineers adopt and identify the appropriate methods fortheir desired applications. We argue that this choice can be guidedby the models one seeks to infer. In this technical briefing, we re-view and reflect on the applications of ML for software engineeringorganised according to the models they produce and the methodsthey use. We introduce the principles of ML, give an overview ofsome key methods, and present examples of areas of software engi-neering benefiting from ML. We also discuss the open challengesfor reaching the full potential of ML for software engineering andhow ML can benefit from software engineering methods.CCS CONCEPTS•Computingmethodologies→Machine learning; • Softwareand its engineering→ Model-driven software engineering;ACM Reference Format:Karl Meinke and Amel Bennaceur. 2018. Machine Learning for SoftwareEngineering: Models, Methods, and Applications. In ICSE ’18 Companion:40th International Conference on Software Engineering , May 27-June 3, 2018,Gothenburg, Sweden. ACM, New York, NY, USA, 2 pages. https://doi.org/10.1145/3183440.31834611 INTRODUCTIONOne can scarcely open a newspaper or switch on the TV nowadayswithout hearing about machine learning (ML), data mining, big dataanalytics, and the radical changeswhich they offer society. However,these technologies have so far had surprisingly little impact onsoftware engineers themselves. By examining the recent literature,we can see small but perhaps significant changes emerging on thehorizon for our discipline. Surely one obstacle to the take-up ofthese exciting technologies in software engineering (SE) is a generallack of awareness of how they might be applied. What problems canPermission to make digital or hard copies of all or part of this work for personal orclassroom use is granted without fee provided that copies are not made or distributedfor profit or commercial advantage and that copies bear this notice and the full citationon the first page. Copyrights for components of this work owned by others than theauthor(s) must be honored. Abstracting with credit is permitted. To copy otherwise, orrepublish, to post on servers or to redistribute to lists, requires prior specific permissionand/or a fee. Request permissions from permissions@acm.org.ICSE ’18 Companion, May 27-June 3, 2018, Gothenburg, Sweden© 2018 Copyright held by the owner/author(s). Publication rights licensed to Associa-tion for Computing Machinery.ACM ISBN 978-1-4503-5663-3/18/05. . . $15.00https://doi.org/10.1145/3183440.3183461ML currently solve? Are such problems at all relevant for softwareengineers?Machine learning is a mature discipline with many excellentmodern introductions to the subject. However, perspectives onML from software engineering are less common [2], and an intro-duction for software engineers that attempts to be both accessibleand pedagogic, is a rare thing. Furthermore, at least some of theML methods currently applied to SE are not widely discussed inmainstream ML. There is much more to ML than deep learning.With these motivations in mind, we will present in this technicalbriefing an introduction to machine learning for software engineer-ing researchers and practitioners having little or no experience ofML. This material might also be useful for the AI community tobetter understand the limitations of their methods in an SE context.To structure our presentation, we will focus on three questionsthat we think should be addressed before attempting any new MLsolution to an existing software engineering problem. These are:• What class of learned models is appropriate for solving anSE problem?• For this class of models, are there any existing learning algo-rithms that will work for typical instances and sizes of my SEproblem? Otherwise, is it possible to adapt any fundamentalML principles to derive new learning algorithms?• Has anyone considered a similar SE problem, and was ittractable to an ML solution?2 RELEVANCE AND TIMELINESSThere is a strong trend in software engineering towards agile soft-ware development, which emphasises incremental and exploratorycoding. However, agility de-emphasises the construction of manytraditional artefacts such as requirements specifications, models, re-ports and documentation, which are typically required for softwareanalysis. To meet the needs of changing approaches to softwaredevelopment, future SE techniques and tools will need to be muchmore automated, lightweight, adaptable and scalable, to keep pacewith increased developer productivity. In particular, they will needto construct their own analysis artefacts and models.Another new line of research concerns using ML to cope withsystems integration problems and systems-of-systems such as theInternet of Things. This involves for example statistical learning forservice matchmaking and automata learning for emergent middle-ware. Note that there is currently no single conference for all thesetopics, so the community is poorly connected. The organisation ofthematic workshops such as: (1) Machine Learning Technologies inSoftware Engineering at ASE 2011, (2) Machine Learning for SystemConstruction at ISoLA 2011, and (3) AI meets Formal Software Devel-opment at Schloss Dagstuhl 2012, illustrate the growing interest inthe field.ICSE ’18 Companion, May 27-June 3, 2018, Gothenburg, Sweden Karl Meinke and Amel BennaceurThis proposed technical briefing will provide a compact intro-duction to ML methods and their use in SE, in conjunction withthe launch of our new book in early 2018, Machine Learning forDynamic Software Analysis: Potentials and Limits. This book is basedon a Dagstuhl Seminar [1], which we co-organised.3 BACKGROUNDThe technical briefing is intended for a broad audience of softwareengineering researchers and practitioners. No prior knowledgeof ML techniques is required, a basic knowledge of modelling isrecommended. We will provide the participants with a handoutbeforehand and we will provide practical examples throughoutthe presentation. All the material will be available online, and willremain online afterwards. As depicted in Figure 1, the presentationwill be structured around three main concepts: models, methods,and applications.ML fo SEMethodsModels ApplicationsSupervisedUn-supervisedSemi-supervisedReinfor-cementAutomataLogicformulaFunctionsNumericparametersModelextractionTestingIntegrationSecurity& Privacy©\tA.\tBennaceur,\tK.\tMeinkeFigure 1: Key concepts of ML for software engineering3.1 ModelsA learning algorithm constructs a model M from a given data set D.This model represents some sort of synthesis of the facts containedin D. Most machine learning algorithms perform inductive infer-ence, to extract general principles, laws or rules from the specificobservations in D. Otherwise, learning would simply correspondto memorisation. So a model M typically contains a combination offacts (from D) and conjectures which have some predictive power.For software analysis, it is sometimes appropriate to learn an ex-plicit model of computation such as an automaton model. At othertimes, an implicit model such as a function approximation modelmay be used.3.2 MethodsThe scope and power of algorithms to learn interesting modelsincreases each year, thanks to the extraordinary productivity ofthe AI community. Therefore, what was technically infeasible fiveyears ago, may have changed or be about to change. This rapidpace of development is reflected in the media excitement. However,the SE community needs to be more aware, on a technical level, ofthese changes, as well as the fundamental and unchanging theoret-ical limits. For example, very broad classes of models (e.g. Turingmachines) are known to be infeasible to learn.Such negative results do not necessarily mean that ML cannotbe used for your SE problem. Nor does media hype imply that youwill succeed. Therefore, we believe that it is beneficial to have someinsight into some general principles of learning that go beyondspecific algorithms.3.3 ApplicationsWe also believe it will be beneficial for software engineers to readabout success stories in applying ML to SE. Figure 2 illustratesapplications of ML techniques to SE activities. In the technicalbriefing, we will outline some SE applications where ML has alreadybeen tried with some degree of success. Scalability in the face ofgrowing software complexity is one of the greatest challenges forSE toolmakers. Therefore, information (however ephemeral) aboutthe state of the art in solved problem sizes is also relevant.Software EngineeringSoftwareRequirementsSoftwareDesignSoftware ConstructionSoftware TestingSoftware MaintenanceSoftware ConfigurationTest case generationProgram generationSpecification extraction Bug detection Learning adaptation strategies design pattern recognitionFigure 2: Applications of ML for software engineering4 PRESENTERSProf. Dr. Karl Meinke. In the last ten years Meinke and his grouphave pioneered new applications of machine learning combinedwith model checking to the problem of functional requirementstesting for software and systems. Group research has studied thelearning problem for both procedural and reactive systems. Nu-merical function approximation as well as symbolic automatonlearning methods have been considered. Our main requirementstesting tool LBTest[3] (http://www.lbtest.org) has been evaluated insectors such as automotive, avionics, finance and web, and by majorSwedish multinational companies such as SAAB Aerospace, Scaniaand Volvo. Meinke has a publication track record in the areas ofmachine learning for finite and infinite state systems, theoreticalprinciples of learning-based testing, and practical tools and casestudies for learning-based testing.Dr. Amel Bennaceur is a Lecturer in Computing at the Open Uni-versity, UK. She received her PhD degree in Computer Science fromthe University of Paris VI in 2013. Her research interests includedynamic mediator synthesis for interoperability and collaborativesecurity. She was part of the Connect and EternalS EU projectsthat explored synergies between machine learning and softwaresynthesis [4]. The results of her work have been published in lead-ing conferences and journals such as Middleware, ECSA, and IEEETSE. She has also been invited to present the results of this workin various scientific events such as Dagstuhl and Shonan seminars.ACKNOWLEDGMENTSWe acknowledge ERC Advanced Grant no. 291652 (ASAP).REFERENCES[1] A. Bennaceur, D. Giannakopoulou, R. Hähnle, and K. Meinke. 2016. MachineLearning for Dynamic Software Analysis: Potentials and Limits (Seminar 16172).Dagstuhl Reports 6, 4 (2016), 161–173. https://doi.org/10.4230/DagRep.6.4.161[2] P. Louridas and C. Ebert. 2016. Machine Learning. IEEE Software 33, 5 (2016),110–115. https://doi.org/10.1109/MS.2016.114[3] K. Meinke and M. A. Sindhu. 2013. LBTest: A Learning-Based Testing Tool forReactive Systems. In Sixth IEEE Int. Conf. on Software Testing, Verification andValidation, ICST 2013, Luxembourg, March 18-22, 2013. 447–454.[4] A. Bennaceur et al. 2012. Machine Learning for Emergent Middleware. In Proc. ofEternalS’12. 16–29.",
    "Link": "https://core.ac.uk/download/151170816.pdf"
}